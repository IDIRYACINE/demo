package Robots;

import Monitors.IRobotsMonitor;

public class AssembalgeRobot extends Thread {
    private static IRobotsMonitor monitor ;
    private static int numberOfProjectedProduction ;
    private static int producedPieces = 0;

    private int pieceType;
    private String ROBOT_NAME;

    public AssembalgeRobot(IRobotsMonitor threadMonitor, int piece , String robotName , int numberOfPieces) {
        monitor = threadMonitor;
        pieceType = piece;
        ROBOT_NAME = robotName;
        numberOfProjectedProduction = numberOfPieces;

    }

    @Override
    public void run() {
        while (producedPieces <numberOfProjectedProduction ){
            monitor.acquireMutexPermission();
            if (!monitor.isPieaceAvaillable(PiecesRegistre.getPieceAcode())){
                monitor.awaitPiece(PiecesRegistre.getPieceAcode());
            }
            else{
                monitor.releaseMutexPermission();
            }
            monitor.acquireMutexPermission();
            if (!monitor.isPieaceAvaillable(PiecesRegistre.getPieceBcode())){
                monitor.awaitPiece(PiecesRegistre.getPieceBcode());
            }
            else{
                monitor.releaseMutexPermission();
            }
            monitor.acquireMutexPermission();

            if (monitor.isPieaceAvaillable(PiecesRegistre.getPieceBcode()) && monitor.isPieaceAvaillable(PiecesRegistre.getPieceAcode())){
                if (producedPieces < numberOfProjectedProduction){
                    monitor.consumePiece(PiecesRegistre.getPieceAcode());
                    monitor.consumePiece(PiecesRegistre.getPieceBcode());
                    monitor.stockNewPiece(pieceType);
                    producedPieces++;
                    System.out.println("Robot "+ ROBOT_NAME + " Produced "+ PiecesRegistre.getPieceName(pieceType) + ": " + producedPieces);
                }
            }
            monitor.releaseMutexPermission();
        }
    }

    
}
