package Monitors;

import java.util.concurrent.Semaphore;
import Robots.*;

public class RobotsMonitor implements IRobotsMonitor {
    private Semaphore mutex;
    private Semaphore[] piecesSemaphores ;
    private int[] piecesStock = {0,0,0};
    private int[] pieceAwait = {0,0};
    private Thread[] robots;

    public RobotsMonitor() {
        mutex = new Semaphore(1);
        initPiecesSemaphore();
    }

    private void initPiecesSemaphore(){
        piecesSemaphores = new Semaphore[2];
        for (int i = 0 ; i <2 ; i++){
            piecesSemaphores[i] = new Semaphore(0);
        }
    }

    @Override
    public void acquireMutexPermission() {
        try {
            mutex.acquire();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void releaseMutexPermission() {
        mutex.release();
    }

    @Override
    public void consumePiece(int pieceType) {
        piecesStock[pieceType] = piecesStock[pieceType] - 1;
        
    }

    @Override
    public boolean isPieaceAvaillable(int pieceType) {
        return piecesStock[pieceType] > 0 ;
        
    }

    @Override
    public void stockNewPiece(int pieceType) {
        piecesStock[pieceType]++;      
    }

    @Override
    public void awaitPiece(int pieceType) {
        pieceAwait[pieceType]++;
        try {
            releaseMutexPermission();
            piecesSemaphores[pieceType].acquire();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }        
    }

    @Override
    public boolean isAwaitingPiece(int pieceType) {
        return pieceAwait[pieceType] > 0 ;
    }

    @Override
    public void aquirePiece(int pieceType) {
        pieceAwait[pieceType]--;
        piecesSemaphores[pieceType].release();
        
    }

    @Override
    public void createRobots(int numberOfApieces , int numberOfBpieces , int numberOfCpieces) {
        robots = new Thread[4];
        robots[0] = new ConstructionRobot(this, 0,"A",numberOfApieces);
        robots[1] = new ConstructionRobot(this, 1,"B",numberOfBpieces);
        robots[2] = new AssembalgeRobot(this, 2,"C",numberOfCpieces);
        robots[3] = new AssembalgeRobot(this, 2,"D",numberOfCpieces);
        
    }

    @Override
    public void startRobots() {
        for (Thread robot : robots) {
            robot.start();
        }
    }

    
}
