package Monitor;

import java.util.concurrent.Semaphore;

import Threads.*;


public class PrinterThreadMonitor implements IPrinterThreadMonitor {
    private Semaphore[] lettersPrintOrderSemaphores;
    private Thread[] letterToEachThreads;
    private int helloLettersCountWithoutDuplicate =  4; 

    public PrinterThreadMonitor() {
        createSemaphores();
    }

    private void createSemaphores() {
        lettersPrintOrderSemaphores = new Semaphore[helloLettersCountWithoutDuplicate];
        lettersPrintOrderSemaphores[0] = new Semaphore(1);
        for (int i= 1 ; i< helloLettersCountWithoutDuplicate ; i++){
            lettersPrintOrderSemaphores[i] = new Semaphore(0);
        }
    }
    
    @Override
    public void createThreads(int numberOfPrintedWords){
        letterToEachThreads = new Thread[helloLettersCountWithoutDuplicate];
        letterToEachThreads[0] = new Hprinter(this,numberOfPrintedWords);
        letterToEachThreads[1] = new Eprinter(this,numberOfPrintedWords);
        letterToEachThreads[2] = new Lprinter(this,numberOfPrintedWords);
        letterToEachThreads[3] = new Oprinter(this,numberOfPrintedWords);
    }

    @Override
    public void startThreads(){
        for (Thread thread : letterToEachThreads) {
            thread.start();
        }
    }

    @Override
    public void aquireWritePermissionAtPosition(int position){
        try {
            lettersPrintOrderSemaphores[position].acquire();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void releaseWritePermissionAtPosition(int position){
        lettersPrintOrderSemaphores[position].release();
    }


    
}
